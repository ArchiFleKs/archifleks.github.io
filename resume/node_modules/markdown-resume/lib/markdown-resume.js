// Generated by CoffeeScript 1.4.0
(function() {
  var cheerio, concatCss, exec, fs, generate, installDir, marked, mustache, path, program, sqwish, stylus, temp;

  fs = require('fs');

  path = require('path');

  exec = require('child_process').exec;

  program = require('commander');

  marked = require('marked');

  cheerio = require("cheerio");

  mustache = require('mustache');

  stylus = require('stylus');

  sqwish = require('sqwish');

  temp = require('temp');

  marked.setOptions({
    breaks: true
  });

  installDir = path.join(__dirname, '..');

  Object.defineProperty(Object.prototype, "extend", {
    enumerable: false,
    value: function(from) {
      var dest, props;
      props = Object.getOwnPropertyNames(from);
      dest = this;
      props.forEach(function(name) {
        var destination;
        if (name in dest) {
          destination = Object.getOwnPropertyDescriptor(from, name);
          return Object.defineProperty(dest, name, destination);
        }
      });
      return this;
    }
  });

  concatCss = function(files) {
    var contents, file, ret, _i, _len;
    ret = "";
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      contents = fs.readFileSync(path.join(installDir, 'assets', 'css', file), 'utf8');
      ret += "\n" + contents;
    }
    return ret;
  };

  generate = function(sourceFile, userOpts, callback) {
    var cssFiles, opts, rawstyle, sourceContents, template;
    opts = {
      format: 'html',
      template: path.join(installDir, 'assets', 'templates', 'default.html')
    };
    if (!(callback != null)) {
      callback = userOpts;
    }
    opts.extend(userOpts);
    if (!(sourceFile != null)) {
      return callback("Source not specified");
    }
    sourceContents = sourceFile;
    if (fs.existsSync(sourceFile)) {
      sourceContents = fs.readFileSync(sourceFile, 'utf8');
    }
    if (!(sourceContents != null) || sourceContents === "") {
      return callback("Source is empty");
    }
    template = fs.readFileSync(opts.template, 'utf8');
    cssFiles = fs.readdirSync(path.join(installDir, 'assets', 'css'));
    rawstyle = concatCss(cssFiles);
    return stylus.render(rawstyle, function(err, css) {
      var $, pdfOutputFilename, pdfRendered, pdfSourceFilename, rendered, resume, title;
      if (err != null) {
        return callback("Error processing the SASS: " + err);
      }
      css = sqwish.minify(css);
      resume = marked(sourceContents);
      $ = cheerio.load(resume);
      title = $('h1').first().text() + ' | ' + $('h2').first().text();
      rendered = mustache.render(template, {
        title: title,
        style: css,
        resume: resume,
        nopdf: opts.format !== 'pdf'
      });
      if (opts.format === 'html') {
        return callback(void 0, rendered);
      } else if (opts.format === 'pdf') {
        pdfRendered = rendered.replace('body class=""', 'body class="pdf"');
        pdfSourceFilename = temp.path({
          suffix: '.html'
        });
        pdfOutputFilename = temp.path({
          suffix: '.pdf'
        });
        fs.writeFileSync(pdfSourceFilename, pdfRendered);
        return exec('wkhtmltopdf ' + pdfSourceFilename + ' ' + pdfOutputFilename, function(err, stdout, stderr) {
          var pdfContents;
          if (err != null) {
            return callback("Error writing pdf: " + err);
          }
          pdfContents = fs.readFileSync(pdfOutputFilename, 'binary');
          return callback(void 0, pdfContents);
        });
      }
    });
  };

  module.exports = {
    generate: generate
  };

}).call(this);
